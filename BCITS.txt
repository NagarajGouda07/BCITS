1.create table Employee(id int primary key not null,
						Name varchar(30) not null,
						Age int,
						JoiningDate date);
						
  alter table Employee add column Salary decimal;
  
2. Drop table if exits tempData;

3. Create table Products(ProductId int primary key,
						ProductName varchar(30) not null,
						Price double check(Price>0));


4. Rename table OldOrders to ArchivedOrders;

5. Create index category_index ON Inventory (Category);

6. Insert into Student values(101,'Alice',20,'A');

7. update Student set Grade='B' where Marks<60;

8. Delet from orders where Status='Cancelled';

9. Insert Into TableA select * from TableB where TableA.id=TableB.id;

10. 


11. select name 
	from employee 
	where join_date > '2020-01-01';
	

12. select MAX(EMP_SALARY) AS MAX_EMP_SALARY FROM Employee; 
	select MIN(EMP_SALARY) AS MIN_EMP_SALARY FROM Employee;
	select AVG(EMP_SALARY) AS AVG_EMP_SALARY FROM Employee;


13. select orders from Orders where OrderAmount>1000 and status='Delivered';


14. select count(products) from sales;

15. select names, order_details from Customers full join Orders on Customers.id=Orders.id where OrderPlaced='success';
                 
16. select names, order_details from Customers full join Orders on Customers.id=Orders.id;

17. select names, order_details from Customers full join Orders on Customers.id=Orders.id;

18. select names from Employee where select avg(Salary) from Employee;

19 select Orders from Orders  where select avg(Salary) from Employee;

20.  select c.name AS customer_name, o.order_id, p.product_name from customers c join orders o ON c.customer_id = o.customer_id
	 join products p ON o.product_id = p.product_id;


21. 

26. Object Relational Maping 
	create an instance of EntityManagerFactory  to establish database connection
	EntityManagerFactory entityManagerFactory =Persistence.createEntityManagerFactory("persistence unit");
	
	using ref of entityManagerFactory create an instance of EntityManager
	EntityManager entityManager=entityManagerFactory.createEntityManager();
	
	which is used to perform CRUD operations
	Transaction transaction=entityManager.getTransaction();
	

27. *Entity
	*EntityManager
	*EntityManagerFactory
	*Persistence Unit
	*Persistence Context
	*Transaction Management.
	
28. 

	A. @oneToMany
	
	One-to-Many (@OneToMany)
	Used when one entity has a list of another entity.
	The foreign key is stored in the child table.
	
	@Entity
	public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;

    @ManyToOne 
    @JoinColumn(name = "department_id") 
    private Department department;
	}

	B. @OneToOne
	
	Used when one entity is related to only one other entity. Can be unidirectional or bidirectional.
	@Entity
	public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;

    @OneToOne(cascade = CascadeType.ALL) 
    @JoinColumn(name = "address_id") 
    private Address address;
	}

	C. @Entity
	public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;

    @ManyToOne 
    @JoinColumn(name = "department_id") 
    private Department department;
	
	
	D. Entity is class which is used name java objects with database table;

	
	E. EntityTransation is used to create Transaction it has to methods commit() and begin();

		*begin() to save the changes
		*commit() to save permanent and if error occurs it will stop trasaction and rollbacks trasaction.


29. Java persistence Query Language;

30. select min(a.price) from ProductEntity a;


31. 31 class Database{

	EntityManagerFactory entityManagerFactory =Persistence.createEntityManagerFactory("persistence unit");
	EntityManager entityManager=entityManagerFactory.createEntityManager();
	Transaction transaction=entityManager.getTransaction();

	try{

		entityManager.begin();
		
		entityManager.commit();
	}
	catch(Exception e){


	}

	}


32. load class Driver
	 using Class.forName(com.mysql.cj.jdbc.Driver)
	 
	 establish Connection;
	 using DriverManager.getConnection();
	 
	 create a PreparedStatement or Statement;
	 
	 execute query 
	 
	 process result
	 
	 close connection.
	 
33. 
	 
 1  Polymorphism
	Polymorphism means many forms, allowing methods to behave differently based on the object that calls them.

	Method Overloading -Compile-time Polymorphism
	Two methods in the same class have the same name but different parameters.


	class AddNum {
		int add(int a, int b) {
			return a + b;
		}

		double add(double a, double b) {
			return a + b;
		}
	}


	Method Overriding -Runtime Polymorphism
	A child class provides a specific implementation of a method that is already defined in the parent class.


	class Parent {
		void show() {
			System.out.println("Parent class");
		}
	}

	class Child extends Parent {
		@Override
		void show() {
			System.out.println("Child class");
		}
	}
	
	
	2.Encaplucation
	
		Encapsulation is the technique of hiding data within a class and allowing controlled access through getter and setter methods.


		class BankAccount {
			private double balance;
			pivate String name;

			public BankAccount(double balance) {
				this.balance = balance;
			}

			public double getBalance() { 
				return balance; 
			}
		   
		}
	
	3.Inheritance
	inheriting the properties from one class to another class is called as inheritance.
		 they are 5 types 
		 1. single level
		 2. multi level
		 3. hybrid level
		 4. heriecle level
		 5. multiple level


		class Animal {
		void makeSound() {
			System.out.println("Animal makes a sound");
		}
		}

		class Dog extends Animal {
			void bark() {
				System.out.println("Dog barks");
			}
		}


	4. Abstraction
	Abstraction hides implementation details and only shows the essential features.

	Abstract Class
	An abstract class contains abstract methods (methods without implementation).


	abstract class Vehicle {
		abstract void start();  

		void fuel() {
			System.out.println("Vehicle has fuel");
		}
	}

	class Car extends Vehicle {
		@Override
		void start() {
			System.out.println("Car starts with a key");
		}
	}

	}
	 
	 Throw is a keyword used to create an Exception 
	 throw followed by reference of Exception
	 
	 Throws is a keyword used to delecate the event 
	 Throws followed by Exception name

34. 
	A.  equals is a method from Object class 
		which is used to compare non primitive types
 
		== is a operator used to column primitive types;
 
	b The final keyword is used to restrict modification of variables, methods, and classes.
 
	  The finally block is used in exception handling and always executes whether an exception occurs or not.
	  
	  The finalize() method is used by Garbage Collector before an object is destroyed. 
	
	c The extends keyword is used when a class inherits from another class or an interface extends another interface.
	The implements keyword is used when a class implements an interface.

	d Checked exceptions are checked at compile time, meaning it must handle them using try-catch or throws.

	Unchecked exceptions occur at runtime and are not checked at compile-time.

	e A method is a block of code that performs a specific task and can be called multiple times.
	A constructor is a special method used to initialize variables when an instance of a class is created.


	f  TreeMap
	*Sorts keys in natural order .
	*Does NOT allow null keys 
	*Slower than HashMap 

	Hashmap
	*Does not maintain order of keys.
	*Allows one null key and multiple null values.
	*Not synchronized (not thread-safe)

	LinkedHashmap
	*Does  maintain order of keys.
	*Allows one null key and multiple null values.
	*Not synchronized (not thread-safe)

 G	 @EnableWebMvc
	*Used to enable Spring MVC in a Spring application.
	*It imports the default Spring MVC configuration like DispatcherServlet, ViewResolvers.
	*Used in manual configuration.

	@configuration
	*Marks a class as a Spring configuration class (replaces XML configuration).
	*Used to define beans and configurations.
	
	
35. Compilation Error.


36 Runtime error

37. Compilation Error

38. true.

39 JavaProgramming.

40. true.

41. 4

42. 1000

43 yes 

44 we can get parameterized reference.

45 we get runtime exception. 

46 hello text will be displayed because ResponseBody return text;


60.
	 <script>
			function changeBackground() {
				document.body.style.backgroundColor = "balck";
			}
		</script> 

59 
	jsp page is used to write expressions
	<c:forEach var="name" items=""names>
	
	</c:forEach>
 
 57
public class PrintNumbers {
    public static void printNumbers(int n) {
        if (n > 100) 
			return;  
        System.out.println(n);
        printNumbers(n + 1); 
    }

    public static void main(String[] args) {
        printNumbers(1);
    }
}

50 
	class Pattren{


	for(int i=1;i<=5;i++){

	for(int j=1;j<=i;j++){
	System.out.print(j);

	}
	System.out.println();

	}
	for(int i=4;i<=1;i++){

	for(int j=1;j<=i;j++){
	System.out.print(j);

	}
	System.out.println();

	}

47. 
public class SimpleEmail {
    public static void main(String[] args) {
	
        String senderEmail = "nagaraj@gmail.com";
        String senderPassword = "Nagaraj";
        String recipientEmail = "yuvaraj@gmail.com";

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "654");

        
        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(senderEmail, senderPassword);
            }
        });

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(senderEmail));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));
            message.setSubject("Message");
            message.setText("Goog morning.");

            Transport.send(message);
            System.out.println("Email sent successfully!");
        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
}

54 Dispatcher Servlet is a front controller which takes all request from browser and sends back the response to browser 

55 using component

56 
a Marks a class as a Spring configuration class.
b it is an object which is managed by Spring container;
c DI is a process of injecting dependent objects;
d Ioc states that invert the control to external entity.

57
public class PrintNumbers {
    public static void printNumbers(int n) {
        if (n > 100) 
			return;  
        System.out.println(n);
        printNumbers(n + 1); 
    }

    public static void main(String[] args) {
        printNumbers(1);
    }
}


58 <form id="formSubmit">
<button type="submit" >Click</button> 
</form>
<script>

document.getElementById("formSubmit").addEventListiner("submit", function (){




})
</script>


48 class ListToSet{

	List<String> list=new ArrayList<>();
	Set<String> set =new HashSet<>();
	
	for(String lis:list){
	set.add(lis);
	
	}

	for(String se:set){
	list.add(se);
	
	}

}



	 
 






